#!/usr/bin/env ruby
#encoding: UTF-8

# 抓取每一个站点的首页链接数量
# require 'rubygems'			# 1.8.7
require 'rubygems'
require 'mongoid'
require 'ap'				# gem install awesome_print
require 'json'
require 'open-uri'
require 'nokogiri'			# gem install nokogiri
require 'forkmanager'		# gem install parallel-forkmanager
require 'beanstalk-client'	# gem install beanstalk-client

Dir.glob("#{File.dirname(__FILE__)}/app/models/*.rb") do |lib|
  require lib
end

ENV['MONGOID_ENV'] = 'aap'
Mongoid.load!("config/mongoid.yml")
class IoFactory
	attr_reader :file
	def self.init file
		@file = file
		if @file.nil?
			puts 'Can Not Init File To Write'
			exit
		end #if
		File.open @file, 'a'
	end     
end #IoFactory
def safe_open(url, retries = 5, sleep_time = 0.42,  headers = {})
    begin  
      html = open(url).read  
		rescue StandardError,Timeout::Error, SystemCallError, Errno::ECONNREFUSED #有些异常不是标准异常  
      puts $!  
      retries -= 1  
      if retries > 0  
        sleep sleep_time and retry  
      else  
				#logger.error($!)
				#错误日志
        #TODO Logging..  
      end  
    end
  end

class MultipleCrawler

	class Crawler
		def initialize(user_agent, redirect_limit=1)
			@user_agent = user_agent
			@redirect_limit = redirect_limit
			@timeout = 20 
		end
		attr_accessor :user_agent, :redirect_limit, :timeout
		
		def fetch(website)
			print "Pid:#{Process.pid}, fetch: #{website}\n"
			url = website
			url = URI.parse(URI.encode(url))
			html_stream = safe_open(url , retries = 3, sleep_time = 0.42, @user_agent)#headers = {})
	
		end
	end
	
	def initialize(links, beanstalk_jobs, pm_max=1, user_agent='', redirect_limit=1)
		@links = links  				# 网址数组 
		
		@beanstalk_jobs = beanstalk_jobs	# beanstalk服务器地址和管道参数
		@pm_max = pm_max 					# 最大并行运行进程数
		@user_agent = user_agent 			# user_agent 伪装成浏览器访问
		@redirect_limit = redirect_limit  	# 允许最大重定向次数
		
		@ipc_reader, @ipc_writer = IO.pipe # 缓存结果的 ipc 管道
	end
	
	attr_accessor :user_agent, :redirect_limit
	
	
	def create_file_to_write
		file_path = File.join('.', "multiple-#{Time.now.to_formatted_s(:number) }.txt")
		@file_to_write = IoFactory.init(file_path)
	end #create_file_to_write


	def init_beanstalk_jobs # 准备beanstalk任务
		beanstalk = Beanstalk::Pool.new(*@beanstalk_jobs)
		#清空beanstalk的残留消息队列
		begin
			while job = beanstalk.reserve(0.1) 
				job.delete
			end
		rescue Beanstalk::TimedOut
			print "Beanstalk queues cleared!\n"
		end
		puts "all in beanstalk's jobs"
		@links.size.times{|i| beanstalk.put(i)} # 将所有的任务压栈
		beanstalk.close
		rescue => e 
			puts e 
			exit
	end
	
	def process_jobs # 处理任务
		start_time = Time.now
		pm = Parallel::ForkManager.new(@pm_max)
		@pm_max.times do |i| 
			pm.start(i) and next # 启动后，立刻 next 不会等待进程执行完，这样才可以并行运算
			beanstalk = Beanstalk::Pool.new(*@beanstalk_jobs)
			loop{ 
				begin
					job = beanstalk.reserve(0.1) # 检测超时为0.1秒，因为任务以前提前压栈
					index = job.body
					job.delete
					website = @links[index.to_i]#["app_url"]
			puts @website
					result = Crawler.new(@user_agent).fetch(website)

					json_post = JSON.parse(result)
					vehicle = json_post["descriptions"]

					@my_link = Link.find(@links[index.to_i][id])
					@my_link.status = 1
					@my_link.result = result

					if vehicle.nil?
						@my_link.pipei = 0
					elsif
						@my_link.pipei = 1
					end
					@my_link.save
					puts "#{@my_link.lid}"
					@file_to_write.puts "#{@my_link.lid}\t#{@my_link.vehicle_id}\t#{@my_link.product_id}\t#{@my_link.part_no}\t#{@my_link.maker}\t#{@my_link.model}\t#{@my_link.engine}\t#{@my_link.year}"

				rescue Beanstalk::DeadlineSoonError, Beanstalk::TimedOut, SystemExit, Interrupt
					break
				end
			}
			pm.finish(0)	
		end
		begin 
			pm.wait_all_children		# 等待所有子进程处理完毕 
		rescue SystemExit, Interrupt	# 遇到中断，打印消息
			print "Interrupt wait all children!\n"
		ensure
		#	print "Process end, total: #{@websites.size}, crawled: #{results.size}, time: #{'%.4f' % (Time.now - start_time)}s.\n"
		end
	end
	
	def read_results # 通过管道读取子进程抓取返回的数据
		results = {}
		while result = @ipc_reader.gets
			results.merge! JSON.parse(result)
		end
		@ipc_reader.close
		results
	end
	
	def run # 运行入口
		init_beanstalk_jobs
		create_file_to_write	
		process_jobs
	end
end
links = Link.asc(:lid).limit(100).where(:status => 0).map(&:status)

#links = Link.limit(100).where(:status => 0)
puts "get limit #{links.count} items."


beanstalk_jobs = [['192.168.2.14:11300'],'crawler-jobs']
user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:13.0) Gecko/20100101 Firefox/13.0'
pm_max = 10

MultipleCrawler.new(links, beanstalk_jobs, pm_max, user_agent).run
